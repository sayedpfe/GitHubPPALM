# SETUP INSTRUCTIONS:
# ==================
# Before running this workflow, you need to set up repository secrets:
# 
# 1. Go to your GitHub repository
# 2. Click Settings > Secrets and variables > Actions
# 3. Click "New repository secret" and add these secrets:
#    - POWERPLATFORM_CLIENT_ID: Your service principal's Application (client) ID
#    - POWERPLATFORM_CLIENT_SECRET: Your service principal's client secret
#    - POWERPLATFORM_TENANT_ID: Your Azure AD tenant ID
#
# To create a service principal:
# 1. Run: az ad sp create-for-rbac --name "GitHubActions-PowerPlatform" --role contributor
# 2. Assign Power Platform Administrator role in Azure AD
# 3. Grant API permissions for Power Platform in Azure AD

name: Main Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      environment_url:
        description: 'Power Platform Environment URL'
        required: true
        type: string
      agent_name:
        description: 'Agent Name (optional)'
        required: false
        type: string

jobs:
  deploy-agent:
    name: Deploy Agent with PowerApps Module Installation
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell environment
      shell: pwsh
      run: |
        Write-Host "üîß Setting up PowerShell environment..." -ForegroundColor Cyan
        
        # Set execution policy
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
        
        # Trust PowerShell Gallery
        Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
        
        # Install required providers
        Install-PackageProvider -Name "NuGet" -MinimumVersion "2.8.5.201" -Force -Scope CurrentUser
        
        Write-Host "‚úÖ PowerShell environment configured" -ForegroundColor Green
        
    - name: Install PowerApps PowerShell modules
      shell: pwsh
      run: |
        Write-Host "üì¶ Installing PowerApps PowerShell modules..." -ForegroundColor Cyan
        
        # Use the dedicated installation script if available
        $installScript = ".\scripts\install-powerapps-modules.ps1"
        if (Test-Path $installScript) {
          Write-Host "Using dedicated installation script..." -ForegroundColor Gray
          & $installScript -Verbose
        } else {
          # Fallback to direct installation
          Write-Host "Using fallback installation method..." -ForegroundColor Gray
          $modules = @(
            "Microsoft.PowerApps.Administration.PowerShell",
            "Microsoft.PowerApps.PowerShell"
          )
          
          foreach ($module in $modules) {
            Write-Host "Installing $module..." -ForegroundColor Yellow
            try {
              Install-Module -Name $module -Repository PSGallery -Force -AllowClobber -Scope CurrentUser -AcceptLicense -ErrorAction Stop
              Import-Module -Name $module -Force -ErrorAction Stop
              Write-Host "‚úÖ Successfully installed $module" -ForegroundColor Green
            } catch {
              Write-Host "‚ùå Failed to install $module`: $($_.Exception.Message)" -ForegroundColor Red
              # Try alternative method
              try {
                Install-Package -Name $module -Source PowerShellGallery -Force -Scope CurrentUser -ErrorAction Stop
                Import-Module -Name $module -Force -ErrorAction Stop
                Write-Host "‚úÖ Successfully installed $module via Install-Package" -ForegroundColor Green
              } catch {
                Write-Warning "‚ö†Ô∏è Could not install $module. Script will use REST API fallbacks."
              }
            }
          }
        }
        
    - name: Verify PowerApps modules
      shell: pwsh
      run: |
        Write-Host "üîç Verifying PowerApps module installation..." -ForegroundColor Cyan
        
        $modules = @(
          "Microsoft.PowerApps.Administration.PowerShell",
          "Microsoft.PowerApps.PowerShell"
        )
        
        foreach ($module in $modules) {
          $loadedModule = Get-Module -Name $module -ErrorAction SilentlyContinue
          if ($loadedModule) {
            Write-Host "‚úÖ $module loaded successfully (Version: $($loadedModule.Version))" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è $module not loaded - REST API fallbacks will be used" -ForegroundColor Yellow
          }
        }
        
        # Test key cmdlets
        $cmdlets = @("Get-AdminPowerAppEnvironment", "Add-PowerAppsAccount", "Get-PowerAppsAccount")
        foreach ($cmdlet in $cmdlets) {
          if (Get-Command -Name $cmdlet -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Cmdlet available: $cmdlet" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è Cmdlet not available: $cmdlet" -ForegroundColor Yellow
          }
        }
        
    - name: Run deployment script
      shell: pwsh
      run: |
        Write-Host "üöÄ Running post-deployment agent configuration..." -ForegroundColor Green
        
        $scriptPath = ".\scripts\post-deploy-agent.ps1"
        
        # Prepare parameters
        $params = @{
          EnvironmentUrl = "${{ github.event.inputs.environment_url }}"
          ClientId = $env:CLIENT_ID
          ClientSecret = $env:CLIENT_SECRET
          TenantId = $env:TENANT_ID
          PublishAgent = $true
          EnableAgent = $true
        }
        
        # Add agent name if provided
        if ("${{ github.event.inputs.agent_name }}") {
          $params.AgentName = "${{ github.event.inputs.agent_name }}"
          Write-Host "Target Agent: ${{ github.event.inputs.agent_name }}" -ForegroundColor Cyan
        } else {
          Write-Host "Target: All agents in environment" -ForegroundColor Cyan
        }
        
        Write-Host "Environment: ${{ github.event.inputs.environment_url }}" -ForegroundColor Cyan
        
        # Execute the script
        try {
          & $scriptPath @params
          Write-Host "‚úÖ Agent deployment completed successfully!" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå Agent deployment failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Stack trace: $($_.Exception.StackTrace)" -ForegroundColor Red
          exit 1
        }
      env:
        CLIENT_ID: ${{ secrets.POWERPLATFORM_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.POWERPLATFORM_CLIENT_SECRET }}
        TENANT_ID: ${{ secrets.POWERPLATFORM_TENANT_ID }}
        
    - name: Output summary
      shell: pwsh
      run: |
        Write-Host "üìã Deployment Summary:" -ForegroundColor Cyan
        Write-Host "======================" -ForegroundColor Cyan
        Write-Host "Environment: ${{ github.event.inputs.environment_url }}" -ForegroundColor White
        Write-Host "Agent Name: ${{ github.event.inputs.agent_name || 'All agents' }}" -ForegroundColor White
        Write-Host "Status: ‚úÖ Completed" -ForegroundColor Green
        Write-Host "" -ForegroundColor White
        Write-Host "Next Steps:" -ForegroundColor Cyan
        Write-Host "1. Test your agent in the target environment" -ForegroundColor Yellow
        Write-Host "2. Configure additional sharing settings if needed" -ForegroundColor Yellow
        Write-Host "3. Set up monitoring and analytics" -ForegroundColor Yellow
