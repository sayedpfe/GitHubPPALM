# Power Platform Managed Solution Deployment
# This workflow deploys only managed solutions to production without post-deployment agent configuration
# 
# Required Repository Secrets:
# - DEV_ENVIRONMENT_URL: Development environment URL (e.g., https://yourorg-dev.crm.dynamics.com)  
# - PROD_ENVIRONMENT_URL: Production environment URL (e.g., https://yourorg.crm.dynamics.com)
# - POWER_PLATFORM_SP_APP_ID: Service principal Application (client) ID
# - POWER_PLATFORM_SP_CLIENT_SECRET: Service principal client secret  
# - POWER_PLATFORM_TENANT_ID: Azure AD tenant ID

name: Managed Solution Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  SOLUTION_NAME: 'TestAutomationSolution'  # Replace with your actual solution name
  SOLUTION_EXPORTED_FOLDER: 'out/exported/'
  SOLUTION_FOLDER: 'out/solutions/'

jobs:
  export-from-dev:
    name: Export Solution from Development
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Setup Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Export solution from development
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ secrets.DEV_ENVIRONMENT_URL }}
        app-id: ${{ secrets.POWER_PLATFORM_SP_APP_ID }}
        client-secret: ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}
        tenant-id: ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        solution-name: ${{ env.SOLUTION_NAME }}
        solution-output-file: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
        managed: false

    - name: Upload exported solution as artifact
      uses: actions/upload-artifact@v4
      with:
        name: exported-solution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

  build-managed-solution:
    name: Build Managed Solution
    needs: [ export-from-dev ]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download exported solution artifact
      uses: actions/download-artifact@v4
      with:
        name: exported-solution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

    - name: Setup Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Convert to managed solution
      shell: pwsh
      run: |
        Write-Host "=== Converting Solution to Managed ===" -ForegroundColor Cyan
        $exportedSolutionPath = "${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip"
        $managedSolutionPath = "${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip"
        $tempUnpackFolder = "temp_unpack"
        
        try {
          if (Test-Path $exportedSolutionPath) {
            Write-Host "Converting $exportedSolutionPath to managed..." -ForegroundColor Yellow
            
            # Unpack the unmanaged solution
            Write-Host "Step 1: Unpacking unmanaged solution..." -ForegroundColor Gray
            pac solution unpack --zipfile $exportedSolutionPath --folder $tempUnpackFolder --packagetype Unmanaged
            
            # Pack as managed solution
            Write-Host "Step 2: Packing as managed solution..." -ForegroundColor Gray
            pac solution pack --zipfile $managedSolutionPath --folder $tempUnpackFolder --packagetype Managed
            
            if (Test-Path $managedSolutionPath) {
              Write-Host "‚úÖ Managed solution created successfully: $managedSolutionPath" -ForegroundColor Green
              Write-Host "   File size: $((Get-Item $managedSolutionPath).Length) bytes" -ForegroundColor Gray
            } else {
              throw "Failed to create managed solution"
            }
          } else {
            throw "Exported solution not found: $exportedSolutionPath"
          }
        }
        catch {
          Write-Error "‚ùå Error during solution conversion: $_"
          exit 1
        }
        finally {
          # Clean up temp folder
          if (Test-Path $tempUnpackFolder) {
            Remove-Item $tempUnpackFolder -Recurse -Force
            Write-Host "Cleaned up temporary folder" -ForegroundColor Gray
          }
        }

    - name: Upload managed solution as artifact
      uses: actions/upload-artifact@v4
      with:
        name: managed-solution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip

  deploy-to-production:
    name: Deploy to Production
    needs: [ build-managed-solution ]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download managed solution artifact
      uses: actions/download-artifact@v4
      with:
        name: managed-solution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

    - name: Setup Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Pre-deployment verification
      shell: pwsh
      run: |
        Write-Host "=== Pre-Deployment Verification ===" -ForegroundColor Cyan
        $managedSolutionPath = "${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip"
        
        if (Test-Path $managedSolutionPath) {
          Write-Host "‚úÖ Managed solution found: $managedSolutionPath" -ForegroundColor Green
          Write-Host "   File size: $((Get-Item $managedSolutionPath).Length) bytes" -ForegroundColor Gray
          Write-Host "   Target environment: ${{ secrets.PROD_ENVIRONMENT_URL }}" -ForegroundColor Gray
          Write-Host "   Solution name: ${{ env.SOLUTION_NAME }}" -ForegroundColor Gray
        } else {
          Write-Error "‚ùå Managed solution not found at: $managedSolutionPath"
          exit 1
        }

    - name: Deploy managed solution to Production
      uses: microsoft/powerplatform-actions/import-solution@v1
      with:
        environment-url: ${{ secrets.PROD_ENVIRONMENT_URL }}
        app-id: ${{ secrets.POWER_PLATFORM_SP_APP_ID }}
        client-secret: ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}
        tenant-id: ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        solution-file: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false

    - name: Deployment success notification
      shell: pwsh
      run: |
        Write-Host "üéâ ===== MANAGED SOLUTION DEPLOYED SUCCESSFULLY ===== üéâ" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã Deployment Summary:" -ForegroundColor Cyan
        Write-Host "   Solution Name: ${{ env.SOLUTION_NAME }}" -ForegroundColor White
        Write-Host "   Solution Type: Managed Solution" -ForegroundColor White
        Write-Host "   Target Environment: Production" -ForegroundColor White
        Write-Host "   Environment URL: ${{ secrets.PROD_ENVIRONMENT_URL }}" -ForegroundColor White
        Write-Host "   Deployment Status: ‚úÖ Success" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìù Important Notes:" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ Solution has been deployed as a managed solution" -ForegroundColor White
        Write-Host "   ‚Ä¢ Copilot Studio agents are included in the solution but not automatically configured" -ForegroundColor White
        Write-Host "   ‚Ä¢ Manual configuration may be required for agent channels and sharing" -ForegroundColor White
        Write-Host "   ‚Ä¢ Test all functionality in the production environment" -ForegroundColor White
        Write-Host ""
        Write-Host "üîó Next Steps:" -ForegroundColor Cyan
        Write-Host "   1. Verify solution components in the production environment" -ForegroundColor Gray
        Write-Host "   2. Test all functionality to ensure everything works as expected" -ForegroundColor Gray
        Write-Host "   3. Configure any manual post-deployment settings if needed" -ForegroundColor Gray
        Write-Host "   4. Update documentation with deployment details" -ForegroundColor Gray

  run-solution-checker:
    name: Run Solution Checker
    needs: [ export-from-dev ]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Download exported solution artifact
      uses: actions/download-artifact@v4
      with:
        name: exported-solution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

    - name: Setup Power Platform CLI
      uses: microsoft/powerplatform-actions/actions-install@v1

    - name: Run Solution Checker
      uses: microsoft/powerplatform-actions/check-solution@v1
      with:
        environment-url: ${{ secrets.DEV_ENVIRONMENT_URL }}
        app-id: ${{ secrets.POWER_PLATFORM_SP_APP_ID }}
        client-secret: ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}
        tenant-id: ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
        checker-logs-artifact-name: 'solution-checker-logs'
