# GitHub Actions workflow to install PowerApps PowerShell modules
# This workflow demonstrates how to properly install and configure PowerApps modules in CI/CD

name: Install PowerApps PowerShell Modules

on:
  workflow_call:
    inputs:
      powershell-version:
        description: 'PowerShell version to use'
        required: false
        default: '7.x'
        type: string
  workflow_dispatch:
    inputs:
      powershell-version:
        description: 'PowerShell version to use'
        required: false
        default: '7.x'
        type: string

jobs:
  install-powerapps-modules:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
          Write-Host "Execution Policy: $(Get-ExecutionPolicy)"
      
    - name: Configure PowerShell for CI/CD
      shell: pwsh
      run: |
        # Set execution policy for current user
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
        
        # Trust PowerShell Gallery
        Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
        
        # Try to install NuGet package provider with fallback
        try {
          Write-Host "Installing NuGet package provider..." -ForegroundColor Yellow
          Install-PackageProvider -Name "NuGet" -MinimumVersion "2.8.5.201" -Force -Scope CurrentUser -ErrorAction Stop
          Write-Host "‚úÖ NuGet package provider installed successfully" -ForegroundColor Green
        } catch {
          Write-Host "‚ö†Ô∏è NuGet package provider installation failed, continuing without it..." -ForegroundColor Yellow
          Write-Host "Error: $($_" + ".Exception.Message)" -ForegroundColor Red
        }
        
        # Install PowerShellGet if needed
        if (-not (Get-Module -ListAvailable -Name PowerShellGet | Where-Object {$_.Version -ge "2.0.0"})) {
          Install-Module -Name PowerShellGet -Force -AllowClobber -Scope CurrentUser
        }
        
        Write-Host "‚úÖ PowerShell configured for CI/CD"
        
    - name: Install PowerApps PowerShell Modules
      shell: pwsh
      run: |
        $modules = @(
          "Microsoft.PowerApps.Administration.PowerShell",
          "Microsoft.PowerApps.PowerShell"
        )
        
        foreach ($module in $modules) {
          try {
            Write-Host "Installing $module..." -ForegroundColor Cyan
            
            # Check if already installed
            $installedModule = Get-Module -ListAvailable -Name $module -ErrorAction SilentlyContinue
            if ($installedModule) {
              Write-Host "‚úÖ $module already installed (Version: $($installedModule.Version))" -ForegroundColor Green
            } else {
              # Install the module with multiple fallback methods
              try {
                Install-Module -Name $module -Repository PSGallery -Force -AllowClobber -Scope CurrentUser -AcceptLicense -ErrorAction Stop
                Write-Host "‚úÖ Successfully installed $module via Install-Module" -ForegroundColor Green
              } catch {
                Write-Host "‚ö†Ô∏è Install-Module failed, trying Install-Package..." -ForegroundColor Yellow
                try {
                  Install-Package -Name $module -Source PowerShellGallery -Force -Scope CurrentUser -ErrorAction Stop
                  Write-Host "‚úÖ Successfully installed $module via Install-Package" -ForegroundColor Green
                } catch {
                  Write-Host "‚ùå Failed to install $module with all methods" -ForegroundColor Red
                  Write-Host "Error: $($_" + ".Exception.Message)" -ForegroundColor Red
                  throw
                }
              }
            }
            
            # Import and verify the module
            Import-Module -Name $module -Force -ErrorAction Stop
            $importedModule = Get-Module -Name $module
            Write-Host "‚úÖ Successfully imported $module (Version: $($importedModule.Version))" -ForegroundColor Green
            
            # Verify key cmdlets are available
            $testCmdlets = switch ($module) {
              "Microsoft.PowerApps.Administration.PowerShell" { @("Get-AdminPowerAppEnvironment", "Add-PowerAppsAccount") }
              "Microsoft.PowerApps.PowerShell" { @("Get-PowerAppsAccount") }
            }
            
            foreach ($cmdlet in $testCmdlets) {
              if (Get-Command -Name $cmdlet -ErrorAction SilentlyContinue) {
                Write-Host "  ‚úÖ Verified cmdlet: $cmdlet" -ForegroundColor Green
              } else {
                Write-Host "  ‚ùå Missing cmdlet: $cmdlet" -ForegroundColor Red
                throw "Required cmdlet $cmdlet not found"
              }
            }
            
          } catch {
            Write-Host "‚ùå Failed to install/import $module" -ForegroundColor Red
            Write-Host "Error: $($_" + ".Exception.Message)" -ForegroundColor Red
            exit 1
          }
        }
        
        Write-Host "üéâ All PowerApps modules installed and verified successfully!" -ForegroundColor Green
        
    - name: Test PowerApps Module Functionality
      shell: pwsh
      run: |
        # Test basic module functionality
        try {
          Write-Host "Testing PowerApps module functionality..." -ForegroundColor Cyan
          
          # Test if we can get module information
          $adminModule = Get-Module -Name "Microsoft.PowerApps.Administration.PowerShell"
          $powerAppsModule = Get-Module -Name "Microsoft.PowerApps.PowerShell"
          
          Write-Host "‚úÖ Admin Module: $($adminModule.Name) v$($adminModule.Version)" -ForegroundColor Green
          Write-Host "‚úÖ PowerApps Module: $($powerAppsModule.Name) v$($powerAppsModule.Version)" -ForegroundColor Green
          
          # Test cmdlet availability (without authentication)
          $availableCmdlets = @(
            "Get-AdminPowerAppEnvironment",
            "Add-PowerAppsAccount", 
            "Get-PowerAppsAccount"
          )
          
          foreach ($cmdlet in $availableCmdlets) {
            if (Get-Command -Name $cmdlet -ErrorAction SilentlyContinue) {
              Write-Host "‚úÖ Cmdlet available: $cmdlet" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Cmdlet missing: $cmdlet" -ForegroundColor Red
            }
          }
          
          Write-Host "üéâ PowerApps modules are ready for use!" -ForegroundColor Green
          
        } catch {
          Write-Host "‚ùå Module functionality test failed: $($_" + ".Exception.Message)" -ForegroundColor Red
          exit 1
        }
