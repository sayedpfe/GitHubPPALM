name: Power Platform Solution Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - test

env:
  SOLUTION_NAME: 'TestAutomationSolution'  # Replace with your actual solution name
  SOLUTION_EXPORTED_FOLDER: 'out/exported/'
  SOLUTION_FOLDER: 'out/solutions/'
  SOLUTION_TARGET_FOLDER: 'solutions/'

jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Setup Power Platform CLI
      run: |
        # Install Power Platform CLI as a .NET global tool
        dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
        # Refresh environment variables to ensure pac is in PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify installation
        pac --version
        
        # List authentication profiles to verify CLI is working
        pac auth list
      shell: pwsh

    - name: Authenticate to Dev Environment
      run: |
        pac auth create --url ${{ secrets.DEV_ENVIRONMENT_URL }} --applicationId ${{ secrets.POWER_PLATFORM_SP_APP_ID }} --clientSecret ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }} --tenant ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        pac auth list

    - name: Export solution
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ secrets.DEV_ENVIRONMENT_URL }}
        solution-name: ${{ env.SOLUTION_NAME }}
        solution-output-file: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
        managed: false

    - name: Unpack solution
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
        solution-folder: ${{ env.SOLUTION_FOLDER }}/${{ env.SOLUTION_NAME }}
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: Upload exported solution as artifact
      uses: actions/upload-artifact@v4
      with:
        name: exportedsolution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

    - name: Upload unpacked solution as artifact
      uses: actions/upload-artifact@v4
      with:
        name: unpackedsolution
        path: ${{ env.SOLUTION_FOLDER }}

  build-managed-solution:
    needs: [ export-from-dev ]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download exported solution artifact
      uses: actions/download-artifact@v4
      with:
        name: unpackedsolution
        path: ${{ env.SOLUTION_FOLDER }}

    - name: Setup Power Platform CLI
      run: |
        # Install Power Platform CLI as a .NET global tool
        dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
        # Refresh environment variables to ensure pac is in PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify installation
        pac --version
      shell: pwsh

    - name: Pack managed solution
      uses: microsoft/powerplatform-actions/pack-solution@v1
      with:
        solution-folder: ${{ env.SOLUTION_FOLDER }}/${{ env.SOLUTION_NAME }}
        solution-file: ${{ env.SOLUTION_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip
        solution-type: 'Managed'

    - name: Upload managed solution as artifact
      uses: actions/upload-artifact@v4
      with:
        name: managedsolution
        path: ${{ env.SOLUTION_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip

  deploy-to-production:
    needs: [ build-managed-solution ]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Download managed solution artifact
      uses: actions/download-artifact@v4
      with:
        name: managedsolution
        path: ${{ env.SOLUTION_FOLDER }}

    - name: Setup Power Platform CLI
      run: |
        # Install Power Platform CLI as a .NET global tool
        dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
        # Refresh environment variables to ensure pac is in PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify installation
        pac --version
      shell: pwsh

    - name: Authenticate to Production Environment
      run: |
        pac auth create --url ${{ secrets.PROD_ENVIRONMENT_URL }} --applicationId ${{ secrets.POWER_PLATFORM_SP_APP_ID }} --clientSecret ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }} --tenant ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        pac auth list

    - name: Import solution to Production
      run: |
        pac solution import --path ${{ env.SOLUTION_FOLDER }}/${{ env.SOLUTION_NAME }}_managed.zip --force-overwrite --publish-changes --skip-dependency-check false

    - name: Post-Deployment Agent Configuration
      if: success()
      shell: pwsh
      run: |
        ${{ github.workspace }}/scripts/post-deploy-agent.ps1 `
          -EnvironmentUrl "${{ secrets.PROD_ENVIRONMENT_URL }}" `
          -ClientId "${{ secrets.POWER_PLATFORM_SP_APP_ID }}" `
          -ClientSecret "${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}" `
          -TenantId "${{ secrets.POWER_PLATFORM_TENANT_ID }}" `
          -PublishAgent $true `
          -EnableAgent $true

    - name: Configure Agent Channels
      if: success() && (vars.ENABLE_TEAMS_CHANNEL == 'true' || vars.ENABLE_WEBSITE_CHANNEL == 'true')
      shell: pwsh
      run: |
        $channels = @()
        if ("${{ vars.ENABLE_TEAMS_CHANNEL }}" -eq "true") { $channels += "Teams" }
        if ("${{ vars.ENABLE_WEBSITE_CHANNEL }}" -eq "true") { $channels += "Website" }
        
        ${{ github.workspace }}/scripts/configure-agent-channels.ps1 `
          -EnvironmentUrl "${{ secrets.PROD_ENVIRONMENT_URL }}" `
          -ClientId "${{ secrets.POWER_PLATFORM_SP_APP_ID }}" `
          -ClientSecret "${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}" `
          -TenantId "${{ secrets.POWER_PLATFORM_TENANT_ID }}" `
          -EnableChannels $channels `
          -ShareWithGroup "${{ vars.SHARE_WITH_GROUP || 'All Company' }}"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Solution and Agent deployed successfully to production!"
          echo "ü§ñ Agent is now published and ready for use!"
        else
          echo "‚ùå Solution deployment failed!"
          exit 1
        fi

  run-solution-checker:
    needs: [ export-from-dev ]
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Download exported solution artifact
      uses: actions/download-artifact@v4
      with:
        name: exportedsolution
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}

    - name: Setup Power Platform CLI
      run: |
        # Install Power Platform CLI as a .NET global tool
        dotnet tool install --global Microsoft.PowerApps.CLI.Tool
        
        # Refresh environment variables to ensure pac is in PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify installation
        pac --version
      shell: pwsh

    - name: Run Solution Checker
      uses: microsoft/powerplatform-actions/check-solution@v1
      with:
        environment-url: ${{ secrets.DEV_ENVIRONMENT_URL }}
        app-id: ${{ secrets.POWER_PLATFORM_SP_APP_ID }}
        client-secret: ${{ secrets.POWER_PLATFORM_SP_CLIENT_SECRET }}
        tenant-id: ${{ secrets.POWER_PLATFORM_TENANT_ID }}
        path: ${{ env.SOLUTION_EXPORTED_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
        checker-logs-artifact-name: 'solution-checker-logs'
